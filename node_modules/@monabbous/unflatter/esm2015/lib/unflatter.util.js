export function unflatter(json) {
    const newJson = {};
    for (const key of Object.keys(json)) {
        const value = json[key];
        if (value === undefined || value === 'undefined') {
            continue;
        }
        if (/(?!\s*\[\s*hidden\s*]\s*)|\s*\[\s*[\w]+\s*]\s*/g.test(key)) {
            const keys = key.split(/\[\s*([\w]+)\s*]/g)
                .filter(f => f !== '');
            keys.reduce((b, k, i) => {
                if (b === undefined) {
                    b = {};
                }
                if (i < keys.length - 1) {
                    b[k] = b[k] || {};
                    return b[k];
                }
                else {
                    b[k] = value;
                }
                return b;
            }, newJson);
        }
        else {
            newJson[key] = value;
        }
    }
    return newJson;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5mbGF0dGVyLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbW9uYWJib3VzL3VuZmxhdHRlci8iLCJzb3VyY2VzIjpbImxpYi91bmZsYXR0ZXIudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLFVBQVUsU0FBUyxDQUFDLElBQUk7SUFDNUIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxXQUFXLEVBQUU7WUFDaEQsU0FBUztTQUNWO1FBQ0QsSUFBSSxpREFBaUQsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0QsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztpQkFDeEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN0QixJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7b0JBQ25CLENBQUMsR0FBRyxFQUFFLENBQUM7aUJBQ1I7Z0JBQ0QsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNsQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDYjtxQkFBTTtvQkFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO2lCQUNkO2dCQUNELE9BQU8sQ0FBQyxDQUFDO1lBQ1gsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDdEI7S0FDRjtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGZ1bmN0aW9uIHVuZmxhdHRlcihqc29uKSB7XHJcbiAgY29uc3QgbmV3SnNvbiA9IHt9O1xyXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGpzb24pKSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGpzb25ba2V5XTtcclxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIGlmICgvKD8hXFxzKlxcW1xccypoaWRkZW5cXHMqXVxccyopfFxccypcXFtcXHMqW1xcd10rXFxzKl1cXHMqL2cudGVzdChrZXkpKSB7XHJcbiAgICAgIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoL1xcW1xccyooW1xcd10rKVxccypdL2cpXHJcbiAgICAgICAgLmZpbHRlcihmID0+IGYgIT09ICcnKTtcclxuICAgICAga2V5cy5yZWR1Y2UoKGIsIGssIGkpID0+IHtcclxuICAgICAgICBpZiAoYiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBiID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpIDwga2V5cy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICBiW2tdID0gYltrXSB8fCB7fTtcclxuICAgICAgICAgIHJldHVybiBiW2tdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBiW2tdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiO1xyXG4gICAgICB9LCBuZXdKc29uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld0pzb25ba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbmV3SnNvbjtcclxufVxyXG4iXX0=